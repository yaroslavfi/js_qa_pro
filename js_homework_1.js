'number' + 3 + 3 // number33 - конкатенація

null + 3 // 3 - null індексується як 0

5 && "qwerty" // qwerty бо оператор && повертає перше хибне значення або останнє істинне, в даному випадку обидва значення істинні

+'40' + +'2' + "hillel"; // 42hillel оскільки + перед строками '40' і '2' перетворює їх в числа

'10' - 5 === 6; // false бо '10' індексується в число 10

true + false // 1 - true і false індексуються в числа 1 і 0

'4px' - 3 // NaN тому що '4px' не може бути перетворено в число

'4' - 3 // 1 тому що стрінга '4' індексується в число 4

'6' + 3 ** 0; // 61 тому що спочатку виконується 3 ** 0 = 1, потім конкатенація

12 / '6' // 2 тому що '6' індексується в число 6

'10' + (5 === 6); // 10false тому що 5 === 6 повертає false яке конкатенується з '10'

null == '' // false тому що null рівний лише undefined або null

3 ** (9 / 3); // 27 тому що 9 / 3 = 3, 3 ** 3 = 27

!!'false' == !!'true' // true тому що !! перетворює значення в boolean, в даному випадку це дві не пусті стрінги (обидві true) тому це true

0 || '0' && 1 // 1 тому що спочатку виконується '0' && 1 = 1 (так як оператор && має вищий пріорітет ніж ||), потім 0 || 1 = 1

(+null == false) < 1; // false тому що +null = 0, false = 0, при порівнянні це дає нам true = 1, відповідно 1 < 1 = false

false && true || true // true тому що false && true = false, false || true = true

false && (false || true); // false тому що false || true = true, false && true = false

(+null == false) < 1 ** 5; // true тому що +null = 0, false = 0, при порівнянні це дає нам true = 1, 1 ** 5 = 1, відповідно 1 < 1 = false